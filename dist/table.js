(()=>{var t={80:t=>{(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{Area:()=>p,Range:()=>d,Viewport:()=>U,default:()=>q,eachRanges:()=>y,expr2xy:()=>l,findRanges:()=>v,stringAt:()=>o,xy2expr:()=>s});var n="ABCDEFGHIJKLMNOPQRSTUVWXYZ";function i(t){return n.charAt(t%n.length)}function o(t){for(var e=[];t>=0;)e.push(i(t)),t=parseInt(t/n.length+"",10)-1;return e.reverse().join("")}function a(t){for(var e=0,r=0;r<t.length;r++)e=26*e+t.charCodeAt(r)-64;return e-1}function l(t){for(var e="",r="",n=0;n<t.length;n+=1)t.charAt(n)>="0"&&t.charAt(n)<="9"?r+=t.charAt(n):e+=t.charAt(n).toUpperCase();return[a(e),parseInt(r,10)-1]}function s(t,e){return"".concat(o(t)).concat(e+1)}function u(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(t,e)||c(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(t,e){if(t){if("string"==typeof t)return h(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?h(t,e):void 0}}function h(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var d=function(){function t(e,r,n,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.startRow=e,this.startCol=r,this.endRow=n,this.endCol=i}var e,r,n;return e=t,n=[{key:"create",value:function(e,r,n,i){if(void 0!==n&&void 0!==i){var o=e,a=r,l=n,s=i;return e>n&&(o=n,l=e),r>i&&(a=i,s=r),new t(o,a,l,s)}return new t(e,r,e,r)}},{key:"with",value:function(t){var e=t.split(":"),r=u(l(e[0]),2),n=r[0],i=r[1];if(1===e.length)return this.create(i,n);var o=u(l(e[1]),2),a=o[0],s=o[1];return this.create(i,n,s,a)}}],(r=[{key:"start",get:function(){return[this.startRow,this.startCol]}},{key:"end",get:function(){return[this.endRow,this.endCol]}},{key:"rows",get:function(){return this.endRow-this.startRow}},{key:"cols",get:function(){return this.endCol-this.startCol}},{key:"multiple",get:function(){return this.cols>0||this.rows>0}},{key:"containsRow",value:function(t){return this.startRow<=t&&t<=this.endRow}},{key:"containsCol",value:function(t){return this.startCol<=t&&t<=this.endCol}},{key:"contains",value:function(t,e){return this.containsRow(t)&&this.containsCol(e)}},{key:"within",value:function(t){return this.startRow>=t.startRow&&this.startCol>=t.startCol&&this.endRow<=t.endRow&&this.endCol<=t.endCol}},{key:"intersectsRow",value:function(t,e){return this.startRow<=e&&t<=this.endRow}},{key:"intersectsCol",value:function(t,e){return this.startCol<=e&&t<=this.endCol}},{key:"intersects",value:function(t){var e=t.startRow,r=t.startCol,n=t.endRow,i=t.endCol;return this.intersectsCol(r,i)&&this.intersectsRow(e,n)}},{key:"union",value:function(e){return new t(e.startRow<this.startRow?e.startRow:this.startRow,e.startCol<this.startCol?e.startCol:this.startCol,e.endRow>this.endRow?e.endRow:this.endRow,e.endCol>this.endCol?e.endCol:this.endCol)}},{key:"eachRow",value:function(t,e){var r=this.endRow;e&&r>e&&(r=e);for(var n=this.startRow;n<=r;n+=1)t(n);return this}},{key:"eachCol",value:function(t,e){var r=this.endCol;e&&r>e&&(r=e);for(var n=this.startCol;n<=r;n+=1)t(n);return this}},{key:"each",value:function(t){var e=this;return this.eachRow((function(r){e.eachCol((function(e){return t(r,e)}))})),this}},{key:"clone",value:function(){return new t(this.startRow,this.startCol,this.endRow,this.endCol)}},{key:"toString",value:function(){var t=s(this.startCol,this.startRow);return this.multiple&&(t+=":".concat(s(this.endCol,this.endRow))),t}},{key:"equals",value:function(t){return this.startRow===t.startRow&&this.startCol===t.startCol&&this.endRow===t.endRow&&this.endCol===t.endCol}}])&&f(e.prototype,r),n&&f(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function y(t,e){t&&t.length>0&&t.forEach((function(t){e(d.with(t))}))}function v(t,e){if(t&&t.length>0){var r,n=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=c(t))){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,l=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){l=!0,o=t},f:function(){try{a||null==r.return||r.return()}finally{if(l)throw o}}}}(t);try{for(n.s();!(r=n.n()).done;){var i=r.value,o=d.with(i);if(e(o))return o}}catch(t){n.e(t)}finally{n.f()}}return null}function w(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var p=function(){function t(e,r,n,i,o){var a=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),g(this,"width",0),g(this,"height",0),g(this,"rowMap",new Map),g(this,"colMap",new Map),g(this,"cellAtCache",null),this.range=e,this.x=r,this.y=n,this.rowHeight=i,this.colWidth=o,e.eachRow((function(t){var e=i(t);e>0&&(a.rowMap.set(t,{y:a.height,height:e}),a.height+=e)})),e.eachCol((function(t){var e=o(t);e>0&&(a.colMap.set(t,{x:a.width,width:e}),a.width+=e)}))}var e,r,n;return e=t,n=[{key:"create",value:function(e,r,n,i,o,a,l,s){return new t(new d(e,r,n,i),o,a,l,s)}}],(r=[{key:"containsx",value:function(t){return t>=this.x&&t<this.x+this.width}},{key:"containsy",value:function(t){return t>=this.y&&t<this.y+this.height}},{key:"contains",value:function(t,e){return this.containsx(t)&&this.containsy(e)}},{key:"eachRow",value:function(t){var e=this;this.range.eachRow((function(r){var n=e.rowMap.get(r)||{y:0,height:0},i=n.y,o=n.height;o>0&&t(r,i,o)}))}},{key:"eachCol",value:function(t){var e=this;this.range.eachCol((function(r){var n=e.colMap.get(r)||{x:0,width:0},i=n.x,o=n.width;o>0&&t(r,i,o)}))}},{key:"each",value:function(t){var e=this;this.eachRow((function(r,n,i){e.eachCol((function(e,o,a){t(r,e,{x:o,y:n,width:a,height:i})}))}))}},{key:"rectRow",value:function(t,e){var r,n=this.rowMap,i=this.range,o=0,a=0;t>=i.startRow&&(o=(null===(r=n.get(t))||void 0===r?void 0:r.y)||0);for(var l=t;l<=e;l+=1){var s=this.rowHeight(l);s>0&&(l<i.startRow&&(o-=s),a+=s)}return{x:0,y:o,width:this.width,height:a}}},{key:"rectCol",value:function(t,e){var r,n=this.colMap,i=this.range,o=0,a=0;t>=i.startCol&&(o=(null===(r=n.get(t))||void 0===r?void 0:r.x)||0);for(var l=t;l<=e;l+=1){var s=this.colWidth(l);s>0&&(l<i.startCol&&(o-=s),a+=s)}return{x:o,y:0,width:a,height:this.height}}},{key:"rect",value:function(t){var e=this.rectRow(t.startRow,t.endRow),r=e.y,n=e.height,i=this.rectCol(t.startCol,t.endCol);return{x:i.x,y:r,width:i.width,height:n}}},{key:"cellAt",value:function(t,e){var r=this.cellAtCache;if(null!=r&&t>r.x&&t<=r.x+r.width&&e>r.y&&e<=r.y+r.height)return r;for(var n=this.range,i={row:n.startRow,col:n.startCol,x:this.x,y:this.y,width:0,height:0};i.y<e;){var o=this.rowHeight(i.row++);i.y+=o,i.height=o}for(i.y-=i.height,i.row--;i.x<t;){var a=this.colWidth(i.col++);i.x+=a,i.width=a}return i.x-=i.width,i.col--,this.cellAtCache=i,i}}])&&w(e.prototype,r),n&&w(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function _(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var b=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.target=e;var n=e.getContext("2d");if(!n)throw new Error("getContext(2d) is null");this._ctx=n,this._scale=r,this._target=e}var e,r;return e=t,(r=[{key:"size",value:function(t,e){var r=this._target,n=this._scale;r.style.width="".concat(t,"px"),r.style.height="".concat(e,"px");var i=window.devicePixelRatio;return r.width=Math.floor(t*i),r.height=Math.floor(e*i),this._ctx.scale(i*n,i*n),this}},{key:"attr",value:function(t,e){var r=this;return e?(this._ctx[t]=e,this):"string"==typeof t?this._ctx[t]:(Object.entries(t).forEach((function(t){var e,n=function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),2!==o.length);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(e)||function(t,e){if(t){if("string"==typeof t)return _(t,2);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_(t,2):void 0}}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=n[0],o=n[1];null!=o&&(r._ctx[i]=o)})),this)}},{key:"measureTextWidth",value:function(t){return this.measureText(t).width}},{key:"line",value:function(t,e,r,n,i){return i&&(this.attr({lineWidth:1,strokeStyle:i.color}),"medium"===i.type?this.attr({lineWidth:2}):"thick"===i.type?this.attr({lineWidth:3}):"dashed"===i.type?this.setLineDash([3,2]):"dotted"===i.type&&this.setLineDash([1,1])),this.moveTo(t,e).lineTo(r,n).stroke(),this}},{key:"clearRect",value:function(t,e,r,n){return this._ctx.clearRect(t,e,r,n),this}},{key:"fillRect",value:function(t,e,r,n){return this._ctx.fillRect(t,e,r,n),this}},{key:"strokeRect",value:function(t,e,r,n){return this._ctx.strokeRect(t,e,r,n),this}},{key:"fillText",value:function(t,e,r,n){return this._ctx.fillText(t,e,r,n),this}},{key:"strokeText",value:function(t,e,r,n){return this._ctx.strokeText(t,e,r,n),this}},{key:"measureText",value:function(t){return this._ctx.measureText(t)}},{key:"getLineDash",value:function(){return this._ctx.getLineDash()}},{key:"setLineDash",value:function(t){return this._ctx.setLineDash(t),this}},{key:"createLinearGradient",value:function(t,e,r,n){return this._ctx.createLinearGradient(t,e,r,n)}},{key:"createRadialGradient",value:function(t,e,r,n,i,o){return this._ctx.createRadialGradient(t,e,r,n,i,o)}},{key:"createPattern",value:function(t,e){return this._ctx.createPattern(t,e)}},{key:"beginPath",value:function(){return this._ctx.beginPath(),this}},{key:"closePath",value:function(){return this._ctx.closePath(),this}},{key:"moveTo",value:function(t,e){return this._ctx.moveTo(t,e),this}},{key:"lineTo",value:function(t,e){return this._ctx.lineTo(t,e),this}},{key:"bezierCurveTo",value:function(t,e,r,n,i,o){return this.bezierCurveTo(t,e,r,n,i,o),this}},{key:"quadraticCurveTo",value:function(t,e,r,n){return this.quadraticCurveTo(t,e,r,n),this}},{key:"arc",value:function(t,e,r,n,i,o){return this._ctx.arc(t,e,r,n,i,o),this}},{key:"arcTo",value:function(t,e,r,n,i){return this._ctx.arcTo(t,e,r,n,i),this}},{key:"ellipse",value:function(t,e,r,n,i,o,a,l){return this._ctx.ellipse(t,e,r,n,i,o,a,l),this}},{key:"rect",value:function(t,e,r,n){return this._ctx.rect(t,e,r,n),this}},{key:"fill",value:function(t){return this._ctx.fill(t),this}},{key:"stroke",value:function(){return this._ctx.stroke(),this}},{key:"clip",value:function(t){return this._ctx.clip(t),this}},{key:"isPointInPath",value:function(t,e,r){return this._ctx.isPointInPath(t,e,r)}},{key:"isPointInStroke",value:function(t,e){return this._ctx.isPointInStroke(t,e)}},{key:"getTransform",value:function(){return this._ctx.getTransform()}},{key:"rotate",value:function(t){return this._ctx.rotate(t),this}},{key:"scale",value:function(t,e){return this._ctx.scale(t,e),this}},{key:"translate",value:function(t,e){return this._ctx.translate(t,e),this}},{key:"setTransform",value:function(t,e,r,n,i,o){return this._ctx.setTransform(t,e,r,n,i,o),this}},{key:"drawImage",value:function(t,e,r){return this._ctx.drawImage(t,e,r),this}},{key:"createImageData",value:function(t,e){return this._ctx.createImageData(t,e)}},{key:"getImageData",value:function(t,e,r,n){return this._ctx.getImageData(t,e,r,n)}},{key:"putImageData",value:function(t,e,r){return this._ctx.putImageData(t,e,r),this}},{key:"save",value:function(){return this._ctx.save(),this}},{key:"restore",value:function(){return this._ctx.restore(),this}}])&&function(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function m(t,e){if(t){if("string"==typeof t)return k(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?k(t,e):void 0}}function k(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function x(t,e,r,n){if(t&&e){var i="";return r&&(i+="italic "),n&&(i+="bold "),"".concat(i," ").concat(e,"pt ").concat(t)}}function R(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(t,e)||function(t,e){if(t){if("string"==typeof t)return C(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?C(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function A(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function S(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?A(Object(r),!0).forEach((function(e){O(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):A(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function O(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function j(t,e,r){var n=e.width,i=e.color;n>0&&(t.save().beginPath().attr({lineWidth:n,strokeStyle:i}),r(),t.restore())}function P(t,e,r,n,i){var o="",a=n,l=void 0;e&&("string"==typeof e||"number"==typeof e?o="".concat(e):(l=e.type,o=(e.value||"")+"",void 0!==e.style&&(a=S(S({},n),i[e.style])))),function(t,e,r,n,i){var o,a=n.border,l=n.fontSize,s=n.fontName,u=n.bold,c=n.italic,h=n.color,f=n.bgcolor,d=n.align,y=n.valign,v=n.underline,w=n.strikethrough,g=n.rotate,p=n.textwrap,_=n.padding;if(t.save().beginPath().translate(r.x,r.y),a){var b=a.top,R=a.right,C=a.bottom,A=a.left;t.save(),b&&t.line(0,0,r.width,0,{type:b[0],color:b[1]}),R&&t.line(r.width,0,r.width,r.height,{type:R[0],color:R[1]}),C&&t.line(0,r.height,r.width,r.height,{type:C[0],color:C[1]}),A&&t.line(0,0,0,r.height,{type:A[0],color:A[1]}),t.restore()}if(t.attr("fillStyle",f).rect(.5,.5,r.width-1,r.height-1).clip().fill(),g&&g>0&&t.rotate(g*(Math.PI/180)),i){var S=q.getCellTypeRender(i);S&&S(i,r)}if(e&&!/^\s*$/.test(e)){t.save().beginPath().attr({textAlign:d,textBaseline:y,font:x(s,l,c,u),fillStyle:h});var O=function(t){if(Array.isArray(t))return t}(o=_||[5,5])||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),2!==o.length);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(o)||m(o,2)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),j=O[0],P=O[1],T=function(t,e,r){switch(t){case"left":return r;case"center":return e/2;case"right":return e-r;default:return 0}}(d,r.width,j),H=e.split("\n"),E=r.width-2*j,I=[];H.forEach((function(e){var r=t.measureTextWidth(e);if(p&&r>E){for(var n={w:0,len:0,start:0},i=0;i<e.length;i+=1)n.w>E&&(I.push(e.substr(n.start,n.len)),n={w:0,len:0,start:i}),n.len+=1,n.w+=t.measureTextWidth(e[i])+1;n.len>0&&I.push(e.substr(n.start,n.len))}else I.push(e)}));var z=1.425*l,M=(I.length-1)*z,W=[];v&&W.push("underline"),w&&W.push("strikethrough");var L=function(t,e,r,n){switch(t){case"top":return n;case"middle":return e/2-r/2;case"bottom":return e-n-r;default:return 0}}(y,r.height,M,P);I.forEach((function(e){var r=t.measureTextWidth(e);t.fillText(e,T,L),W.forEach((function(e){t.line.apply(t,function(t){return function(t){if(Array.isArray(t))return k(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||m(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(function(t,e,r,n,i,o,a){var l=0;"underline"===t?"top"===r?l=-a:"middle"===r&&(l=-a/2):"strikethrough"===t&&("top"===r?l=-a/2:"bottom"===r&&(l=a/2));var s=0;return"center"===e?s=o/2:"right"===e&&(s=o),[n-s,i-l,n-s+o,i-l]}(e,d,y,T,L,r,l)))})),L+=z})),t.restore()}t.restore()}(t,o,r,a,l)}function T(t,e,r,n,i,o,a,l,s){if(e){t.save().translate(e.x,e.y),function(t,e,r){j(t,r,(function(){e.eachRow((function(r,n,i){t.line(0,n+i,e.width,n+i)})),e.eachCol((function(r,n,i){t.line(n+i,0,n+i,e.height)}))}))}(t,e,i),t.rect(0,0,e.width,e.height).clip();var u=function(t,e){var r=S({},n);if(l){var i=l(t);i&&void 0!==i.style&&Object.assign(r,o[i.style])}if(s){var a=s(e);a&&void 0!==a.style&&Object.assign(r,o[a.style])}return r};e.each((function(e,n,i){P(t,r(e,n),i,u(e,n),o)})),a&&y(a,(function(n){n.intersects(e.range)&&P(t,r(n.startRow,n.startCol),e.rect(n),u(n.startRow,n.startCol),o)})),t.restore()}}function H(t,e,r){T(t,e,r._cell,r._cellStyle,r._lineStyle,r._styles,r._merges,r._row,r._col)}function E(t,e,r){var n=r._rowHeader,i=n.cell,o=n.width,a=n.merges;n.cols,o>0&&T(t,e,i,r._headerCellStyle,r._headerLineStyle,r._styles,a)}function I(t,e,r){var n=r._colHeader,i=n.cell,o=n.height,a=n.merges;n.rows,o>0&&T(t,e,i,r._headerCellStyle,r._headerLineStyle,r._styles,a)}function z(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function M(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?z(Object(r),!0).forEach((function(e){W(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):z(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function W(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function L(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(t,e)||D(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function D(t,e){if(t){if("string"==typeof t)return N(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?N(t,e):void 0}}function N(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var U=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._render=e;for(var r=[e._rowHeader.width,e._colHeader.height],n=r[0],i=r[1],o=L(e._freeze,2),a=o[0],l=o[1],s=e._startRow,u=e._startCol,c=e._rows,h=e._cols,f=function(t){return e.rowHeightAt(t)},d=function(t){return e.colWidthAt(t)},y=p.create(s,u,l-1,a-1,n,i,f,d),v=l+e._scrollRows,w=a+e._scrollCols,g=y.height,_=v;g<e._height&&_<c;)g+=f(_),_+=1;for(var b=y.width,m=w;b<e._width&&m<h;)b+=d(m),m+=1;var k=p.create(v,w,_-1,m-1,n+y.width,i+y.height,f,d),x=p.create(s,w,l-1,m-1,n+y.width,i,f,d),R=p.create(v,u,_-1,a-1,n,i+y.height,f,d);this.areas=[x,y,R,k];var C=e._rowHeader,A=e._colHeader,S=function(){return A.height/A.rows},O=function(){return C.width/C.cols};this.headerAreas=[p.create(0,x.range.startCol,A.rows-1,x.range.endCol,k.x,0,S,d),p.create(0,y.range.startCol,A.rows-1,y.range.endCol,y.x,0,S,d),p.create(y.range.startRow,0,y.range.endRow,C.cols-1,0,y.y,f,O),p.create(R.range.startRow,0,R.range.endRow,C.cols-1,0,k.y,f,O)]}var e,r;return e=t,(r=[{key:"cellAt",value:function(t,e){var r=this.areas[1],n=L(this.headerAreas,4),i=n[0],o=n[1],a=n[2],l=n[3];if(t<r.x&&e<r.y)return{placement:"all",row:0,col:0,x:0,y:0,width:r.x,height:r.y};if(t<r.x)return M({placement:"row-header"},(a.containsy(e)?a:l).cellAt(t,e));if(e<r.y)return M({placement:"col-header"},(o.containsx(t)?o:i).cellAt(t,e));var s,u=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=D(t))){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,l=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){l=!0,o=t},f:function(){try{a||null==r.return||r.return()}finally{if(l)throw o}}}}(this.areas);try{for(u.s();!(s=u.n()).done;){var c=s.value;if(c.contains(t,e))return M({placement:"body"},c.cellAt(t,e))}}catch(t){u.e(t)}finally{u.f()}return null}}])&&function(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function $(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function V(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var F,q=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),V(this,"_width",0),V(this,"_height",0),V(this,"_scale",1),V(this,"_rows",100),V(this,"_cols",26),V(this,"_rowHeight",25),V(this,"_colWidth",100),V(this,"_startRow",0),V(this,"_startCol",0),V(this,"_scrollRows",0),V(this,"_scrollCols",0),V(this,"_row",(function(){})),V(this,"_col",(function(){})),V(this,"_cell",(function(){})),V(this,"_merges",[]),V(this,"_styles",[]),V(this,"_lineStyle",{width:1,color:"#e6e6e6"}),V(this,"_cellStyle",{bgcolor:"#ffffff",align:"left",valign:"middle",textwrap:!0,underline:!1,strikethrough:!1,color:"#0a0a0a",bold:!1,italic:!1,rotate:0,fontSize:9,fontName:"Source Sans Pro"}),V(this,"_rowHeader",{width:60,cols:1,cell:function(t,e){return t+1}}),V(this,"_colHeader",{height:25,rows:1,cell:function(t,e){return o(e)}}),V(this,"_headerLineStyle",{width:1,color:"#e6e6e6"}),V(this,"_headerCellStyle",{bgcolor:"#f4f5f8",align:"center",valign:"middle",textwrap:!0,underline:!1,strikethrough:!1,color:"#585757",bold:!1,italic:!1,rotate:0,fontSize:9,fontName:"Source Sans Pro"}),V(this,"_freeze",[0,0]),V(this,"_freezeLineStyle",{width:2,color:"#d8d8d8"}),V(this,"_viewport",null);var i="string"==typeof e?document.querySelector(e):e;if(!i)throw new Error("target error");this._target=i,this._width=r,this._height=n}var e,r,n;return e=t,n=[{key:"create",value:function(e,r,n){return new t(e,r,n)}},{key:"addCellTypeRender",value:function(t,e){this._cellTypeRender.set(t,e)}},{key:"getCellTypeRender",value:function(t){return this._cellTypeRender.get(t)}}],(r=[{key:"render",value:function(){return this._viewport=new U(this),function(t){var e=t._width,r=t._height,n=t._target,i=t._scale,o=t._viewport,a=t._freeze,l=t._rowHeader,s=t._colHeader;if(o){var u=new b(n,i);u.size(e,r);var c=R(o.areas,4),h=c[0],f=c[1],d=c[2],y=c[3],v=R(o.headerAreas,4),w=v[0],g=v[1],_=v[2],m=v[3];H(u,y,t),H(u,h,t),I(u,w,t),H(u,d,t),E(u,m,t),H(u,f,t),I(u,g,t),E(u,_,t);var k=R(a,2),x=k[0],C=k[1];(x>0||C>0)&&j(u,t._freezeLineStyle,(function(){x>0&&u.line(0,y.y,e,y.y),C>0&&u.line(y.x,0,y.x,r)}));var A=f.x,S=f.y;if(A>0&&S>0){var O=p.create(0,0,0,0,0,0,(function(){return s.height}),(function(){return l.width}));T(u,O,(function(){return""}),t._headerCellStyle,t._headerLineStyle,t._styles)}}}(this),this}},{key:"width",value:function(t){return this._width=t,this}},{key:"height",value:function(t){return this._height=t,this}},{key:"scale",value:function(t){return this._scale=t,this}},{key:"rows",value:function(t){return this._rows=t,this}},{key:"cols",value:function(t){return this._cols=t,this}},{key:"rowHeight",value:function(t){return this._rowHeight=t,this}},{key:"colWidth",value:function(t){return this._colWidth=t,this}},{key:"startRow",value:function(t){return this._startRow=t,this}},{key:"startCol",value:function(t){return this._startCol=t,this}},{key:"scrollRows",value:function(t){return this._scrollRows=t,this}},{key:"scrollCols",value:function(t){return this._scrollCols=t,this}},{key:"row",value:function(t){return this._row=t,this}},{key:"col",value:function(t){return this._col=t,this}},{key:"cell",value:function(t){return this._cell=t,this}},{key:"merges",value:function(t){return t&&(this._merges=t),this}},{key:"styles",value:function(t){return t&&(this._styles=t),this}},{key:"lineStyle",value:function(t){return Object.assign(this._lineStyle,t),this}},{key:"cellStyle",value:function(t){return Object.assign(this._cellStyle,t),this}},{key:"rowHeader",value:function(t){return t&&Object.assign(this._rowHeader,t),this}},{key:"colHeader",value:function(t){return t&&Object.assign(this._colHeader,t),this}},{key:"headerLineStyle",value:function(t){return Object.assign(this._headerLineStyle,t),this}},{key:"headerCellStyle",value:function(t){return t&&Object.assign(this._headerCellStyle,t),this}},{key:"freeze",value:function(t){return t&&(this._freeze=l(t)),this}},{key:"freezeLineStyle",value:function(t){return Object.assign(this._freezeLineStyle,t),this}},{key:"rowHeightAt",value:function(t){var e=this._row;if(e){var r=e(t);if(r)return r.hide?0:r.height}return this._rowHeight}},{key:"colWidthAt",value:function(t){var e=this._col;if(e){var r=e(t);if(r)return r.hide?0:r.width}return this._colWidth}},{key:"viewport",get:function(){return this._viewport}}])&&$(e.prototype,r),n&&$(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();V(q,"_cellTypeRender",new Map),window&&((F=window).wolf||(F.wolf={}),window.wolf.table_render=q.create),t.exports=r})()}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{"use strict";r.r(n),r.d(n,{default:()=>ot});var t=r(80),e=r.n(t);function i(t,e,r){for(var n=0,i=t;i<e;i+=1)n+=r(i);return n}function o(t,e){var r=Object.keys(t);if(r.length!==Object.keys(e).length)return!1;for(var n=0;n<r.length;n+=1){var i=r[n],a=t[i],l=e[i];if(void 0===l)return!1;if("string"==typeof a||"number"==typeof a||"boolean"==typeof a){if(a!==l)return!1}else if(Array.isArray(a)){if(a.length!==l.length)return!1;for(var s=0;s<a.length;s+=1)if(!o(a[s],l[s]))return!1}else if("function"!=typeof a&&!Array.isArray(a)&&a instanceof Object&&!o(a,l))return!1}return!0}function a(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(t,e)||function(t,e){if(t){if("string"==typeof t)return l(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var c=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,"_",[]),u(this,"_indexes",new Map),u(this,"_formulas",[]),u(this,"_formula",(function(t){return t}))}var e,r;return e=t,r=[{key:"formula",value:function(t){return this._formula=t,this}},{key:"load",value:function(t){var e=t.cells;e&&(this._=e,this.resetIndexes())}},{key:"get",value:function(t,e){var r=this._indexes;if(r.has(t)){var n=r.get(t).get(e);return void 0!==n?this._[n][2]:null}return null}},{key:"set",value:function(t,e,r){var n=this.get(t,e);if(null==n){var i=this._.push([t,e,r])-1;this.updateIndex(t,e,i),this.addFormula(r,i)}else{var o=r instanceof Object&&n instanceof Object&&r.value!==n.value;Object.assign(n,r),o&&this.resetFormulas()}}},{key:"resetIndexes",value:function(){for(var t=this._,e=(this._indexes,0);e<t.length;e+=1){var r=a(t[e],3),n=r[0],i=r[1],o=r[2];this.updateIndex(n,i,e),this.addFormula(o,e)}}},{key:"updateIndex",value:function(t,e,r){var n=this._indexes;n.has(t)||n.set(t,new Map),n.get(t).set(e,r)}},{key:"addFormula",value:function(t,e){t instanceof Object&&t.formula&&(t.value=this._formula(t.formula),this._formulas.push(e))}},{key:"resetFormulas",value:function(){var t=this;this._formulas.forEach((function(e){var r=a(t._[e],3)[2];r instanceof Object&&(r.value=t._formula(r.formula))}))}}],r&&s(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function h(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function f(t,e,r,n,i,o){var a=n[i],l=!1;if("+"===e)for(var s=t.scroll[i];s<t.rows.len&&!(a>r);s+=1)a+=o(s),t.scroll[i]=s+1,l=!0;else for(var u=t.scroll[i];u>0&&!(a<r);u-=1)a-=o(u),t.scroll[i]=u-1,l=!0;return n[i]=a,l}var d=function(){function t(e){var r,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n=[0,0],(r="_value")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this._data=e}var e,r;return e=t,(r=[{key:"x",value:function(t,e){var r=this;return t&&void 0!==e?f(this._data(),t,e,this._value,0,(function(t){return p(r._data(),t).width})):this._value[0]}},{key:"y",value:function(t,e){var r=this;return t&&void 0!==e?f(this._data(),t,e,this._value,1,(function(t){return m(r._data(),t).height})):this._value[1]}}])&&h(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function y(e,r){var n=e.merges;if(n)for(var i=t.Range.with(r),o=0;o<n.length;o+=1)if(t.Range.with(n[o]).equals(i))return!0;return!1}function v(e,r){var n=t.Range.with(r);if(n.multiple){e.merges||(e.merges=[]);var i=e.merges;i.length<=0||i.forEach((function(e,r){t.Range.with(e).within(n)&&i.splice(r,1)})),i.push(r)}}function w(t,e){var r=t.merges;if(r)for(var n=0;n<r.length;n+=1)if(r[n]===e)return void r.splice(n,1)}function g(e,r){var n=e.merges;if(n)for(var i=0;i<n.length;i+=1){var o=t.Range.with(n[i]);o.intersects(r)&&(r=o.union(r))}return r}function p(t,e){return t.cols[e]||{width:t.colWidth}}function _(t,e,r){if(!r){var n=p(t,e);return n.hide?0:n.width}if(r!==t.colWidth){var i=t.cols;i[e]?i[e].width=r:i[e]={width:r}}}function b(t,e,r){var n=t.cols;if(1===arguments.length){var o=n.len*t.colWidth;for(var a in n)if("len"!==a){var l=_(t,parseInt(a,10));o+=l,o-=t.colWidth}return o}return i(void 0!==e?e:0,void 0!==r?r:n.len,(function(e){return _(t,e)}))}function m(t,e){return t.rows[e]||{height:t.rowHeight}}function k(t,e,r){if(!r){var n=m(t,e);return n.hide?0:n.height}if(r!==t.rowHeight){var i=t.rows;i[e]?i[e].height=r:i[e]={height:r}}}function x(t,e,r){var n=t.rows;if(1===arguments.length){var o=n.len*t.rowHeight;for(var a in n)if("len"!==a){var l=k(t,parseInt(a,10));o+=l,o-=t.rowHeight}return o}return i(void 0!==e?e:0,void 0!==r?r:n.len,(function(e){return k(t,e)}))}function R(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function C(t,e){if(t){if("string"==typeof t)return A(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?A(t,e):void 0}}function A(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function S(t){if(Array.isArray(t))return t}function O(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function j(){for(var t=document.createDocumentFragment(),e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return r.forEach((function(e){var r;r=e instanceof P?e._:"string"==typeof e?document.createTextNode(e):e,t.appendChild(r)})),t}var P=function(){function t(e,r){var n,i,o,a,l;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,i="_data",o=new Map,i in n?Object.defineProperty(n,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[i]=o,this._=e instanceof Node?e:document.createElement(e),r)if("string"==typeof r)this._.className=r;else if(Array.isArray(r))this._.className=r.join(" ");else for(var s=0,u=Object.entries(r);s<u.length;s++){var c=(a=u[s],l=2,S(a)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,o=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){l=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw i}}return o}}(a,l)||C(a,l)||R()),h=c[0];c[1]&&this._.classList.add(h)}}var e,r;return e=t,r=[{key:"data",value:function(t,e){return e?(this._data.set(t,e),this):this._data.get(t)}},{key:"on",value:function(t,e){var r,n=S(r=t.split("."))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||C(r)||R(),i=n[0],o=n.slice(1);return this._.addEventListener(i,(function(t){e(t);for(var r=0;r<o.length;r+=1)"stop"===o[r]&&t.stopPropagation(),"prevent"===o[r]&&t.preventDefault()})),this}},{key:"attr",value:function(t,e){return e?(this._.setAttribute(t,e),this):this._.getAttribute(t)}},{key:"css",value:function(t,e){var r=this;return e?(this._.style.setProperty(t,e),this):"string"==typeof t?this._.style.getPropertyValue(t):(Object.keys(t).forEach((function(e){var n=t[e];"number"==typeof n&&(n="".concat(n,"px")),r._.style.setProperty(e,n)})),this)}},{key:"rect",value:function(){return this._.getBoundingClientRect()}},{key:"show",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this.css("display",t?"block":"none"),this}},{key:"hide",value:function(){return this.css("display","none"),this}},{key:"scrollx",value:function(t){var e=this._;return t?(e.scrollLeft=t,this):e.scrollLeft}},{key:"scrolly",value:function(t){var e=this._;return t?(e.scrollTop=t,this):e.scrollTop}},{key:"after",value:function(){return this._.after(j.apply(void 0,arguments)),this}},{key:"before",value:function(){return this._.before(j.apply(void 0,arguments)),this}},{key:"append",value:function(){return this._.append(j.apply(void 0,arguments)),this}},{key:"remove",value:function(){for(var e=this,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];n.forEach((function(r){e._.removeChild(r instanceof t?r._:r)}))}},{key:"cloneNode",value:function(){return this._.cloneNode(!0)}},{key:"firstChild",get:function(){var e=this._.firstChild;return e?new t(e):null}}],r&&O(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function T(t,e){return new P(t,e)}var H="wolf-table";function E(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function I(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var z={vertical:"height",horizontal:"width"},M=function(){function t(e,r){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),I(this,"_value",0),I(this,"_maxValue",0),I(this,"_change",null),this._type=e,this._content=T("div","content"),this._=T("div","".concat(H,"-scrollbar ").concat(e)).append(this._content).on("scroll.stop",(function(t){var r=t.target,i=r.scrollTop,o=r.scrollLeft;if(n._change){var a="vertical"===e?i:o,l=a>n._value?"+":"-";n._change(l,a,t),n._value=a}})),r.append(this._)}var e,r;return e=t,(r=[{key:"value",get:function(){return this._value}},{key:"change",value:function(t){return this._change=t,this}},{key:"scroll",value:function(t){var e=this._,r=this._type;return t?("vertical"===r?e.scrolly(t):e.scrollx(t),this):"vertical"===r?e.scrolly():e.scrollx()}},{key:"test",value:function(t){return t>0&&t<=this._maxValue}},{key:"resize",value:function(t,e){if(e>t-1){var r=z[this._type];this._content.css(r,"".concat(e,"px")),this._.css(r,"".concat(t,"px")).show(),this._maxValue=e-t}else this._.hide();return this}}])&&E(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function W(t,e,r){t.addEventListener(e,r)}function L(t,e,r){t.removeEventListener(e,r)}function D(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function N(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function U(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var $=function(){function t(e,r,n,i){var o=this,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};D(this,t),U(this,"_cell",null),this._type=e,this._minValue=n,this._lineLength=i,this._change=a,this._=T("div","".concat(H,"-resizer ").concat(e)).append(this._hover=T("div","hover").on("mousedown.stop",(function(t){return V(o,t)})),this._line=T("div","line")),r.append(this._)}var e,r;return e=t,(r=[{key:"show",value:function(t){this._cell=t;var e=this._type,r=t.x,n=t.y,i=t.width,o=t.height;this._.css("left","".concat("row"===e?r:r+i-5,"px")).css("top","".concat("row"===e?n+o-5:n,"px")).show();var a="row"===e?"width":"height";this._hover.css(a,"".concat(t[a],"px")),this._line.css(a,"".concat(this._lineLength(),"px"))}},{key:"hide",value:function(){this._.hide()}}])&&N(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function V(t,e){var r=t._type,n=t._cell,i=t._minValue,o=t._,a=t._line,l=t._change,s=0;a.show();var u=function(t){null!==e&&1===t.buttons&&n&&("row"===r?(s+=t.movementY)+n.height>=i?o.css("top","".concat(n.y+n.height+s,"px")):s=i-n.height:(s+=t.movementX)+n.width>=i?o.css("left","".concat(n.x+n.width+s,"px")):s=i-n.width)};W(window,"mousemove",u),W(window,"mouseup",(function t(){L(window,"mousemove",u),L(window,"mouseup",t),a.hide(),o.hide(),n&&0!=s&&l(s,n)}))}function F(t){return function(t){if(Array.isArray(t))return q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return q(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?q(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function G(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function X(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Y=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),X(this,"ranges",[]),X(this,"rowHeaderRanges",[]),X(this,"colHeaderRanges",[]),X(this,"_startRange",null),X(this,"_placement","body"),X(this,"_areas",[]),X(this,"_rowHeaderAreas",[]),X(this,"_colHeaderAreas",[]),X(this,"_",null),X(this,"_targets",[]),X(this,"_targetChildren",[]),this._corner=T("div","corner"),this._data=t}var r,n;return r=e,n=[{key:"placement",value:function(t){return this._placement=t,this}},{key:"addRange",value:function(e,r){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=g(this._data,t.Range.create(e,r));return n&&this.clearRanges(),this.ranges.push(i),this._startRange=i,B(this),this}},{key:"unionRange",value:function(e,r){var n=t.Range.create(e,r),i=this.ranges,o=this._startRange;if(o){var a=o.union(n);i.splice(-1,1,g(this._data,a)),B(this)}return this}},{key:"clearRanges",value:function(){return[this.ranges].forEach((function(t){return t.length=0})),this}},{key:"addAreaRect",value:function(t,e){var r=e.x,n=e.y,i=e.width,o=e.height;return this._areas.push(T("div","".concat(H,"-selector-area")).css({left:r+2,top:n+2,width:i-4,height:o-4}).show()),t===this.ranges.length-1&&(this._=T("div","".concat(H,"-selector")).css({left:r,top:n,width:i-4,height:o-4}).show(),"body"===this._placement&&this._.append(this._corner)),this}},{key:"addRowHeaderAreaRect",value:function(t){var e=t.x,r=t.y,n=t.width,i=t.height;return this._rowHeaderAreas.push(T("div","".concat(H,"-selector-area row-header")).css({left:e,top:r,width:n,height:i}).show()),this}},{key:"addColHeaderAreaRect",value:function(t){var e=t.x,r=t.y,n=t.width,i=t.height;return this._colHeaderAreas.push(T("div","".concat(H,"-selector-area col-header")).css({left:e,top:r,width:n,height:i}).show()),this}},{key:"addTarget",value:function(t){var e;return e=[].concat(F(this._areas),F(this._rowHeaderAreas),F(this._colHeaderAreas)),this._areas.length>0&&this._&&e.push(this._),t.append.apply(t,F(e)),this._targetChildren.push(e),this._targets.push(t),this.clearAreas(),this}},{key:"clearTargets",value:function(){var t=this;return this._targets&&this._targets.length>0&&(this._targets.forEach((function(e,r){return e.remove.apply(e,F(t._targetChildren[r]))})),[this._targetChildren,this._targets].forEach((function(t){return t.length=0})),this.clearAreas()),this}},{key:"clearAreas",value:function(){[this._rowHeaderAreas,this._colHeaderAreas,this._areas].forEach((function(t){return t.length=0})),this._=null}}],n&&G(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),e}();function K(t,e,r){t.sort(e);var n=t[0],i=[];1===t.length&&i.push(n);for(var o=1;o<t.length;o+=1){var a=t[o];r(n,a)?n=n.union(a):(i.push(n),n=a)}return t.length>1&&i.push(n),i}function B(e){for(var r=[],n=[],i=0;i<e.ranges.length;i+=1){var o=e.ranges[i],a=o.startRow,l=o.startCol,s=o.endRow,u=o.endCol;(a>0||s>0)&&r.push(t.Range.create(a,0,s,0)),(l>0||u>0)&&n.push(t.Range.create(0,l,0,u))}e.rowHeaderRanges=K(r,(function(t,e){return t.startRow-e.startRow}),(function(t,e){return t.intersectsRow(e.startRow,e.endRow)})),e.colHeaderRanges=K(n,(function(t,e){return t.startCol-e.startCol}),(function(t,e){return t.intersectsCol(e.startCol,e.endCol)}))}function J(t){return function(t){if(Array.isArray(t))return Q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Q(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Q(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Z(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function tt(){return T("div","".concat(H,"-overlayer-area"))}var et=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.areas=[tt(),tt(),tt(),tt()],this.headerAreas=[tt(),tt(),tt(),tt()],e.append.apply(e,J(this.areas).concat(J(this.headerAreas)))}var e,r;return e=t,(r=[{key:"area",value:function(t,e){return e?(this.areas[t].css(e),this):this.areas[t]}},{key:"headerArea",value:function(t,e){return e&&this.headerAreas[t].css(e),this.headerAreas[t]}}])&&Z(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function rt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function nt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var it,ot=function(){function r(n,i,o,a){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),nt(this,"_colHeader",{height:25,rows:1,cell:function(e,r){return(0,t.stringAt)(r)}}),nt(this,"_rowHeader",{width:60,cols:1,cell:function(t,e){return t+1}}),nt(this,"_minRowHeight",25),nt(this,"_minColWidth",60),nt(this,"_cells",new c),nt(this,"_vScrollbar",null),nt(this,"_hScrollbar",null),nt(this,"_rowResizer",null),nt(this,"_colResizer",null),nt(this,"_selector",null),this._width=i,this._height=o;var l="string"==typeof n?document.querySelector(n):n;if(null===l)throw new Error("first argument error");if(this._container=T(l,"".concat(H,"-container")).css({height:o(),width:i()}),this._data={rows:{len:100},cols:{len:26},rowHeight:25,colWidth:100,scroll:[0,0],style:{fontName:"Helvetica",fontSize:10,color:"#333",bgcolor:"#fff",align:"left",valign:"middle",textwrap:!1,bold:!1,italic:!1,underline:!1,strikethrough:!1}},a){var s=a.cols,u=a.rows,h=a.rowHeight,f=a.colWidth,y=a.minRowHeight,v=a.minColWidth,w=a.cellStyle,g=a.rowHeader,p=a.colHeader,_=this._data;y&&(this._minRowHeight=y),v&&(this._minColWidth=v),s&&(_.cols.len=s),u&&(_.rows.len=u),h&&(_.rowHeight=h),f&&(_.colWidth=f),w&&Object.assign(_.style,w),g&&Object.assign(this._rowHeader,g),p&&Object.assign(this._colHeader,p)}var b,m,k=document.createElement("canvas"),x=T(k);this._container.append(k),this._render=new(e())(k,i(),o()),this._overlayer=new et(this._container),null!=a&&a.scrollable&&(b=this,m=new d((function(){return b._data})),b._vScrollbar=new M("vertical",b._container).change((function(t,e){m.y(t,e)&&(b.render(),at(b))})),b._hScrollbar=new M("horizontal",b._container).change((function(t,e){m.x(t,e)&&(b.render(),at(b))}))),null!=a&&a.resizable&&function(t){t._rowResizer=new $("row",t._container,t._minRowHeight,(function(){return t._width()}),(function(e,r){var n=r.row,i=r.height;t.rowHeight(n,i+e).render(),at(t)})),t._colResizer=new $("col",t._container,t._minColWidth,(function(){return t._height()}),(function(e,r){var n=r.col,i=r.width;t.colWidth(n,i+e).render(),at(t)}))}(this),null!=a&&a.selectable&&(this._selector=new Y(this._data)),function(t,e){e.on("wheel.prevent",(function(e){var r=e.deltaX,n=e.deltaY,i=t._hScrollbar,o=t._vScrollbar;if(Math.abs(r)>Math.abs(n)){if(i){var a=i.value+r;i.test(a)&&i.scroll(a)}}else if(o){var l=o.value+n;o.test(l)&&o.scroll(l)}}))}(this,x),function(t,e){e.on("mousemove",(function(e){var r=t._rowResizer,n=t._colResizer,i=t._render.viewport,o=e.buttons,a=e.offsetX,l=e.offsetY;if(i&&0===o){var s=t._rowHeader,u=t._colHeader;if(r&&s.width>0)if(a<s.width&&l>u.height){var c=i.cellAt(a,l);c&&r.show(c)}else r.hide();if(n&&u.height>0)if(l<u.height&&a>s.width){var h=i.cellAt(a,l);h&&n.show(h)}else n.hide()}}))}(this,x),function(t,e){e.on("mousedown",(function(r){var n=t._selector,i=t._render,o=(t._data,i.viewport),a={row:0,col:0};if(n&&o){var l=r.offsetX,s=r.offsetY,u=r.ctrlKey,c=r.metaKey,h=r.shiftKey,f=o.cellAt(l,s);if(f){var d=f.placement,y=f.row,v=f.col;if(h?n.unionRange(y,v):(a={row:y,col:v},n.placement(d).addRange(y,v,!(c||u))),at(t),"all"!==d){var w=e.rect(),g=w.left,p=w.top,_=function(e){var r=0,i=0;e.x>0&&(r=e.x-g),e.y>0&&(i=e.y-p),"row-header"===d&&(r=1),"col-header"===d&&(i=1);var l=o.cellAt(r,i);if(l){var s=l.row,u=l.col;s==a.row&&u===a.col||(n.unionRange(s,u),at(t),a={row:s,col:u})}};W(window,"mousemove",_),W(window,"mouseup",(function t(){L(window,"mousemove",_),L(window,"mouseup",t)}))}}}}))}(this,x)}var n,i,a;return n=r,i=[{key:"data",value:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return t?(Object.assign(this._data,t),this._cells.load(this._data),this):this._data}))},{key:"resize",value:function(){this._container.css({height:this._height(),width:this._width()})}},{key:"freeze",value:function(t){return t&&(this._data.freeze=t),this}},{key:"isMerged",value:function(t){var e=this;if(t)return y(this._data,t);var r=this._selector;return!!r&&r.ranges.every((function(t){return y(e._data,t.toString())}))}},{key:"merge",value:function(t){var e=this;if(t)v(this._data,t);else{var r=this._selector;r&&r.ranges.forEach((function(t){return v(e._data,t.toString())}))}return this}},{key:"unmerge",value:function(t){var e=this;if(t)w(this._data,t);else{var r=this._selector;r&&r.ranges.forEach((function(t){return w(e._data,t.toString())}))}return this}},{key:"rowHeight",value:function(t,e){return k(this._data,t,e),this}},{key:"colWidth",value:function(t,e){return _(this._data,t,e),this}},{key:"colsWidth",value:function(t,e){return b(this._data,t,e)}},{key:"rowsHeight",value:function(t,e){return x(this._data,t,e)}},{key:"formula",value:function(t){return this._cells.formula(t),this}},{key:"addStyle",value:function(t){return function(t,e){if(t.styles||(t.styles=[]),e)for(var r=0;r<t.styles.length;r+=1)if(o(t.styles[r],e))return r;return t.styles.push(e)-1}(this._data,t)}},{key:"cell",value:function(t,e,r){var n=this._cells;return r?(n.set(t,e,r),this):n.get(t,e)}},{key:"render",value:function(){var t=this;this._render.colHeader(this._colHeader).rowHeader(this._rowHeader).scrollRows(this._data.scroll[1]).scrollCols(this._data.scroll[0]).merges(this._data.merges).freeze(this._data.freeze).styles(this._data.styles).rows(this._data.rows.len).cols(this._data.cols.len).row((function(e){return m(t._data,e)})).col((function(e){return p(t._data,e)})).cell((function(e,r){return t.cell(e,r)})).render();var e,r=this._render,n=this._overlayer,i=r.viewport;return i&&(i.areas.forEach((function(t,e){var r=t.x,i=t.y,o=t.width,a=t.height;n.area(e,{left:r,top:i,width:o,height:a})})),i.headerAreas.forEach((function(t,e){var r=t.x,i=t.y,o=t.width,a=t.height;n.headerArea(e,{left:r,top:i,width:o,height:a})})),(e=this)._vScrollbar&&e._vScrollbar.resize(e._height(),x(e._data)),e._hScrollbar&&e._hScrollbar.resize(e._width()-15,b(e._data))),this}}],a=[{key:"create",value:function(t,e,n,i){return new r(t,e,n,i)}}],i&&rt(n.prototype,i),a&&rt(n,a),Object.defineProperty(n,"prototype",{writable:!1}),r}();function at(t){var e=t._selector,r=t._overlayer,n=t._container,i=t._rowHeader,o=t._colHeader,a=t._render.viewport;if(e&&a){var l=e._placement;e.clearTargets();var s=i.width,u=o.height,c=t._width()-s,h=t._height()-u,f=function(t,n){a.areas.forEach((function(i,o){var a=!1;e.ranges.forEach((function(r,l){t(i.range,r)&&(a=!0,e.addAreaRect(l,n(i,r,o)))})),a&&e.addTarget(r.areas[o])}))},d=function(t,n){n.forEach((function(n){var i=a.headerAreas[n],o=!1;("row"===t?e.rowHeaderRanges:e.colHeaderRanges).forEach((function(r){"row"===t?i.range.intersectsRow(r.startRow,r.endRow)&&(o=!0,e.addRowHeaderAreaRect(i.rectRow(r.startRow,r.endRow))):i.range.intersectsCol(r.startCol,r.endCol)&&(o=!0,e.addColHeaderAreaRect(i.rectCol(r.startCol,r.endCol)))})),o&&e.addTarget(r.headerAreas[n])}))};"all"===l?e.addAreaRect(0,{x:s,y:u,width:c,height:h}).addRowHeaderAreaRect({x:0,y:u,width:s,height:h}).addColHeaderAreaRect({x:s,y:0,width:c,height:u}).addTarget(n):"row-header"===l?(f((function(t,e){return t.intersectsRow(e.startRow,e.endRow)}),(function(t,e,r){var n=t.rectRow(e.startRow,e.endRow);return n.width+=2,0!==r&&3!==r||(n.x-=2),n})),d("row",[2,3]),[0,1].forEach((function(t){e.addColHeaderAreaRect({x:0,y:0,width:c,height:u}).addTarget(r.headerAreas[t])}))):"col-header"===l?(f((function(t,e){return t.intersectsCol(e.startCol,e.endCol)}),(function(t,e,r){var n=t.rectCol(e.startCol,e.endCol);return n.height+=2,2!==r&&3!==r||(n.y-=2),n})),d("col",[0,1]),[2,3].forEach((function(t){e.addRowHeaderAreaRect({x:0,y:0,height:h,width:s}).addTarget(r.headerAreas[t])}))):(f((function(t,e){return t.intersects(e)}),(function(t,e){return t.rect(e)})),d("row",[2,3]),d("col",[0,1]))}}window&&((it=window).wolf||(it.wolf={}),window.wolf.table=ot.create)})(),module.exports=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,